#include  <iostream> 
using  namespace  std; 
class  Book 
{ 
//请在此处补充Book类的定义 
   private:
      unsigned int m_ID;//编号
      string m_Name;//书名
      string m_Introductio;//简介
      string m_Author;//作者
      string m_Date;//日期
      unsigned int m_Page;//页数
   public:
   	Book()
   	{m_ID=0;
	   }	
	Book(const Book& other)
	{
	  m_ID=other.m_ID;
	  m_Name=other.m_Name;
      m_Introductio=other.m_Introductio;
      m_Author=other.m_Author;
      m_Date=other.m_Date;
      m_Page=other.m_Page;
	}
   	void SetID(int i);
   	void SetName(string n);
   	void SetAuthor(string a);
   	void SetIntroduction(string i);
   	void SetDate(string d);
   	void SetPage(unsigned int p);
    friend class Store;
    int GetID()
    {  
    	 return m_ID;
	}
     string GetName()
    {
      return	m_Name;
	}

}; 
//请在此处补充Book类的成员函数实现 
 void Book::SetID(int i)
   {
   	   m_ID=i;
   }
void Book::SetName(string n)
{
	m_Name=n;
}
void Book::SetAuthor(string a)
{
	m_Author=a;
}
void Book::SetIntroduction(string i)
{
  m_Introductio=i;
}
void Book::SetDate(string d)
{
	m_Date=d;
}
void Book::SetPage(unsigned int p)
{
	m_Page=p;
}

class  Store 
{ 
//请在此处补充Store类的定义 
 private:
 	int m_Count;
 	Book* m_pBook;
 public:
   Store()
     {
 	     m_Count=0;m_pBook=0;
 	     cout<<"Store default constructor called!"<<endl;
     }
     Store(int n)
     {
     	m_Count=n;
     	m_pBook=new Book[n];
     	cout<<"Store constructor with (int n) called!"<<endl;
	 }
	 virtual ~Store()
	 {
	 	m_Count=0;
	 	if(m_pBook!=0)
	 	{
	 		delete []m_pBook;
	 		cout<<"Store destructor called!"<<endl;
		 }
		 
	 }
	 Store(const Store& other)
	 {
	 	
	 	m_Count=other.m_Count;
	 	m_pBook=other.m_pBook;
	 	cout<<"Store copy constructor called!"<<endl;
	 }
	 void in(Book &b);
	 void out(string name);
	 void printList();
	 Book findbyName(string name)
	  {
 	    int i;
 	    for(i=0;i<m_Count;i++)
 		   if(m_pBook[i].m_Name==name)  return m_pBook[i];
 		if(i==m_Count) 
 		{
 			Book a;
 			return a;
		 }
      }
	 Book findbyID(int ID)
	  {
 	    int i;
 	    for(i=0;i<m_Count;i++)
 		   if(m_pBook[i].m_ID==ID)  return m_pBook[i];
 		 if(i==m_Count) 
 		{
 			Book b;
 			return b;
		 }
	  }	 
	 int GetCount()
	 {
	 	return m_Count;
	 }
}; 
//请在此处补充Store类的成员函数实现 
 void Store::in(Book &b)
 {  
    int i;
 	m_Count++;
 	Book* p=new Book[m_Count];
 	for(i=0;i<m_Count-1;i++)
 	{
 		p[i].m_ID=m_pBook[i].m_ID;
 		p[i].m_Name=m_pBook[i].m_Name;
 		p[i].m_Author=m_pBook[i].m_Author;
 		p[i].m_Introductio=m_pBook[i].m_Introductio;
 		p[i].m_Date=m_pBook[i].m_Date;
 		p[i].m_Page=m_pBook[i].m_Page;
	 }
 		p[m_Count-1]=b;
 		
	delete[] m_pBook;
	m_pBook=p;
	
 }
 void Store::out(string name)
 {   
   int i,j;Book* p=new Book[3];
   for(i=0;i<m_Count;i++)
   {
   	p[i].m_ID=m_pBook[i].m_ID;
 		p[i].m_Name=m_pBook[i].m_Name;
 		p[i].m_Author=m_pBook[i].m_Author ;
 		p[i].m_Introductio=m_pBook[i].m_Introductio;
 		 p[i].m_Date=m_pBook[i].m_Date;
 		p[i].m_Page=m_pBook[i].m_Page;
   }
    for(i=0;i<m_Count;i++)
 		if(m_pBook[i].m_Name==name) j=i;
 	m_Count--;
 	m_pBook=new Book[m_Count];
 	for(i=0;i<m_Count;i++)
 	{   if(i!=j)
 	    {	m_pBook[i].m_ID=p[i].m_ID;
 		m_pBook[i].m_Name=p[i].m_Name;
 		m_pBook[i].m_Author=p[i].m_Author;
 		m_pBook[i].m_Introductio=p[i].m_Introductio;
 		m_pBook[i].m_Date=p[i].m_Date;
 		m_pBook[i].m_Page=p[i].m_Page;
	      }
 	   else
 	   {
 	   	m_pBook[i].m_ID=p[i+1].m_ID;
 		m_pBook[i].m_Name=p[i+1].m_Name;
 		m_pBook[i].m_Author=p[i+1].m_Author;
 		m_pBook[i].m_Introductio=p[i+1].m_Introductio;
 		m_pBook[i].m_Date=p[i+1].m_Date;
 		m_pBook[i].m_Page=p[i+1].m_Page;
		}
	 }
	 delete[] p;
 }

void Store::printList()
 {  int i;
 	cout<<"There are totally "<<m_Count<<" Books"<<endl;
 	for(i=0;i<m_Count;i++)
 	cout<<"ID="<<m_pBook[i].m_ID<<";  "<<"name:"<<m_pBook[i].m_Name<<";  "<<"Author:"<<m_pBook[i].m_Author<<";  "<<"Date:"<<m_pBook[i].m_Date<<";"<<endl;

 }
int  main() 
{ 
        Store  s; 
        Book  b1,b2,b3; 
        b1.SetID(1); 
        b1.SetName("C++  语言程序设计(第4版)"); 
        b1.SetAuthor("郑莉"); 
        b1.SetIntroduction("介绍C++及面向对象的知识"); 
        b1.SetDate("201007"); 
        b1.SetPage(529); 
        b2.SetID(2); 
        b2.SetName("离散数学"); 
        b2.SetAuthor("左孝凌"); 
        b2.SetIntroduction("介绍命题逻辑、谓词逻辑、集合论、代数系统和图论"); 
        b2.SetDate("198209"); 
        b2.SetPage(305); 
        b3.SetID(3); 
        b3.SetName("c程序设计"); 
        b3.SetAuthor("谭浩强"); 
        b3.SetIntroduction("介绍C程序设计中的基本知识，如语句格式、语法等"); 
        b3.SetDate("201006"); 
        b3.SetPage(355); 

        cout<<"第一本书入库"<<endl; 
        s.in(b1); 
        cout<<"第二本书入库"<<endl; 
        s.in(b2); 
        cout<<"第三本书入库"<<endl; 
        s.in(b3); 
        cout  <<"现有库存书籍数量："<<s.GetCount()  <<  endl; 
        cout  <<"查找并出库图书：离散数学"  <<  endl; 
        Book  tmpbook=s.findbyName("离散数学"); 
        if(tmpbook.GetID()!=0) 
        { 
                s.out("离散数学"); 
                cout  <<"离散数学  已成功出库"  <<  endl; 
        } 
        else 
                cout<<"没有找到name为离散数学的书"<<endl; 
        cout  <<"现有库存书籍数量："<<s.GetCount()  <<  endl; 

        cout  <<"查找图书  ID：3"  <<  endl; 
        tmpbook=s.findbyID(3); 
        if(tmpbook.GetID()!=0) 
                cout<<"找到ID为"<<3<<"的书，书名："<<tmpbook.GetName()<<endl; 
        else 
                cout<<"没有找到ID为"<<3<<"的书"<<endl; 

        cout  <<"查找图书  name：离散数学"  <<  endl; 
        tmpbook=s.findbyName("离散数学"); 
        if(tmpbook.GetID()!=0) 
                cout<<"找到name为离散数学的书，ID："<<tmpbook.GetID()<<endl; 
        else 
                cout<<"没有找到name为离散数学的书"<<endl; 

        cout<<"输出所有库存图书的信息"<<endl; 
        s.printList(); 
        cout<<"程序运行结束"<<endl; 
        return  0; 
}