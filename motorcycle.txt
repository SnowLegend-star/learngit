#include  "iostream" 
using  namespace  std; 

 class vehicle{
 	private:
 		int maxspeed,weight;
 	public:
 		vehicle(int i,int j):maxspeed(i),weight(j){
 			cout<<"vehicle constructor called. maxspeed:"<<maxspeed<<"; weight"<<weight<<endl;;
		 }
		 ~vehicle(){
		 	cout<<"vehicle destructor called. maxspeed:"<<maxspeed<<"; weight"<<weight<<endl;
		 }
 };
class bicycle:virtual public vehicle{
	private:
		int height;
	public:
		bicycle(int i,int j,int k):height(i),vehicle(j,k){
			cout<<"bicycle constructor called. height:"<<height<<endl;
		}
		~bicycle(){
			cout<<"bicycle destructor called. height:"<<height<<endl;
		}
};
class motorcar:virtual public vehicle{
	private:
		int seatnum;
	public:
		motorcar(int i,int j,int k):seatnum(i),vehicle(j,k){
			cout<<"motorcar constructor called. setnum:"<<seatnum<<endl;
		}
		~motorcar(){
			cout<<"motorcar destructor called. setnum:"<<seatnum<<endl;
		}
};
class motorcycle:public bicycle,public motorcar{
	public:
		void run(){
 			cout<<"vehicle run"<<endl;
		 }
		 void stop(){
 			cout<<"vehicle stop"<<endl;
		 }
		 motorcycle(int h,int i,int j,int k):bicycle(h,j,k),motorcar(i,j,k),vehicle(j,k){
		 	cout<<"motorcycle constructor called"<<endl;
		 }
		 ~motorcycle(){
		 	cout<<"motorcycle destructor called"<<endl;
		 }
};
int  main(int  argc,  char  *argv[]) 
{ 
        motorcycle  m(1,  2,  3,  4);//1表示height，2表示setnum，3表示maxspeed，4表示weight 
        m.run(); 
        m.stop(); 
        return  0; 
}
